// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
const API_KEY     = 'AIzaSyCTZ1P-b1yqq3A75r91DOnmHJYMMb7fKGY'; // !!! –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á API !!!
const SHEET_ID    = '1JUk0iVBhpOZf1kfOoe-WKwHXMoYxdTrpje7iUqDnMPs'; // !!! ID –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã !!!
const RANGE       = 'A:E'; // –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö (A:E)

let products = []; // –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤

// --- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–æ–≤ ---
// viewStates: { 'view-1': 'innerHTML_content_1', 'view-2': 'innerHTML_content_2', ... }
let viewStates = {};
// viewMetadata: { 'view-1': '–ù–∞–∑–≤–∞–Ω–∏–µ 1', 'view-2': '–ù–∞–∑–≤–∞–Ω–∏–µ 2', ... }
let viewMetadata = {};
let activeViewId = 'view-1'; // ID —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–∞
let nextViewIdCounter = 1; // –°—á–µ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –Ω–æ–≤—ã—Ö –≤–∏–¥–æ–≤ (–Ω–∞—á–Ω–µ–º —Å 1, —Ç.–∫. "–°–ø–∏—Å–æ–∫ 1" –º–æ–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

// --- DOM –≠–ª–µ–º–µ–Ω—Ç—ã ---
const menuToggleBtn = document.getElementById('menu-toggle');
const sideMenu = document.getElementById('side-menu');
const closeMenuBtn = document.getElementById('close-menu');
const viewList = document.getElementById('view-list'); // ul —ç–ª–µ–º–µ–Ω—Ç
const addViewBtn = document.getElementById('add-view-btn');
const productTable = document.getElementById('product-table');
const tableBody = productTable.querySelector('tbody');
const totalSumCell = document.getElementById('total-sum');
const mainContent = document.getElementById('main-content');
const fabButton = document.getElementById('add-row');
const currentViewNameElement = document.getElementById('current-view-name');
let lastFocusedInput = null;

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π input —Å —Ñ–æ–∫—É—Å–æ–º
tableBody.addEventListener('focusin', (e) => {
    if (e.target.tagName === 'INPUT' && e.target.type === 'text') {
        lastFocusedInput = e.target;
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ paste –Ω–∞ —Å—Ç–∞–¥–∏–∏ –∑–∞—Ö–≤–∞—Ç–∞ (capture=true)
document.addEventListener('paste', (event) => {
    if (!lastFocusedInput || !tableBody.contains(lastFocusedInput)) return;

    const clipboardData = event.clipboardData || window.clipboardData;
    const pastedText = clipboardData.getData('text');
    const lines = pastedText.split(/\r?\n/).filter(line => line.trim() !== '');

    if (lines.length === 0) return;

    event.stopImmediatePropagation(); // üí• –ë–ª–æ–∫–∏—Ä—É–µ—Ç –í–°–ï –¥—Ä—É–≥–∏–µ paste
    event.preventDefault();           // üí• –ó–∞–ø—Ä–µ—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –≤—Å—Ç–∞–≤–∫—É

    const currentRow = lastFocusedInput.closest('tr');
    const currentRowIndex = Array.from(tableBody.rows).indexOf(currentRow);
    const currentInputIndex = Array.from(currentRow.querySelectorAll('input[type="text"]')).indexOf(lastFocusedInput);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
    const neededRows = currentRowIndex + lines.length;
    while (tableBody.rows.length < neededRows) {
        addRow(false); // –Ω–µ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º
    }

    lines.forEach((lineText, i) => {
        const row = tableBody.rows[currentRowIndex + i];
        const inputs = row.querySelectorAll('input[type="text"]');
        const cells = lineText.split('\t');

        cells.forEach((cellText, j) => {
            const input = inputs[currentInputIndex + j];
            if (input) {
                input.value = cellText.trim();
                // Instead of dispatching 'input' event which triggers suggestions,
                // directly call onNameChange if it's the name input.
                // For other inputs (qty, etc.), just setting the value is enough.
                if (input.classList.contains('name-input')) {
                    // Assuming onNameChange can handle direct calls
                    // and will find product data if the name matches.
                    // Pass the row and the old value (empty string, as it's a new paste)
                    onNameChange(input.closest('tr'), '');
                    // Manually hide suggestions if they appear for pasted name
                    const suggestionsDropdown = input.nextElementSibling;
                    if (suggestionsDropdown && suggestionsDropdown.classList.contains('suggestions-dropdown')) {
                        suggestionsDropdown.style.display = 'none';
                        input.removeAttribute('aria-expanded');
                    }
                } else {
                    input.dispatchEvent(new Event('input', { bubbles: true }));
                }
            }
        });
    });

    calculateTotal();
    saveCurrentViewState();
}, true); // <-- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û capture=true


// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage ---

function saveAppStateToLocalStorage() {
    console.log('Saving app state to localStorage...');
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã 'value' —É –∏–Ω–ø—É—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π —Ç–∞–±–ª–∏—Ü–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º innerHTML
        tableBody.querySelectorAll('tr').forEach(tr => {
            const nameInput = tr.querySelector('.name-input');
            const qtyInput = tr.querySelector('.qty-input');
            if (nameInput) {
                nameInput.setAttribute('value', nameInput.value);
            }
            if (qtyInput) {
                qtyInput.setAttribute('value', qtyInput.value);
            }
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ tableBody –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–∞
        viewStates[activeViewId] = tableBody.innerHTML;

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        const appState = {
            viewStates: viewStates,
            viewMetadata: viewMetadata,
            activeViewId: activeViewId,
            nextViewIdCounter: nextViewIdCounter
        };
        const jsonState = JSON.stringify(appState);
        localStorage.setItem('productTableState', jsonState);
        console.log('App state saved successfully.');
    } catch (error) {
        console.error('Error saving app state to localStorage:', error);
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    }
}

function loadAppStateFromLocalStorage() {
    console.log('Loading app state from localStorage...');
    try {
        const jsonState = localStorage.getItem('productTableState');
        if (jsonState) {
            const appState = JSON.parse(jsonState);
            viewStates = appState.viewStates || {};
            viewMetadata = appState.viewMetadata || {};
            activeViewId = appState.activeViewId || 'view-1';
            nextViewIdCounter = appState.nextViewIdCounter || 1;

            console.log('App state loaded successfully.');
            return true; // –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        } else {
            console.log('No saved state found in localStorage.');
            return false; // –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        }
    } catch (error) {
        console.error('Error loading app state from localStorage:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞, –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –æ—á–∏—Å—Ç–∏—Ç—å localStorage
        // localStorage.removeItem('productTableState'); // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        // alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.');
        return false;
    }
}


// --- –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∏—Å–µ–ª ---
function formatNumberDisplay(num) {
    const number = parseFloat(num);
    if (isNaN(number)) return '';
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º toLocaleString –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
    return number.toLocaleString('ru-RU', {
        minimumFractionDigits: 0, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
        maximumFractionDigits: 2  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
    });
}

function parseFormattedNumber(str) {
    if (!str) return 0;
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
    const cleanedString = String(str).replace(/\s/g, '').replace(',', '.');
    return parseFloat(cleanedString) || 0;
}


// === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker ===
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    // –ò–°–ü–†–ê–í–õ–ï–ù –ü–£–¢–¨ –ö –°–ö–†–ò–ü–¢–£ Service Worker –¥–ª—è GitHub Pages
    navigator.serviceWorker.register('/product-table-app/sw.js', { scope: '/product-table-app/' })
      .then((registration) => {
        console.log('Service Worker: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ —Å –æ–±–ª–∞—Å—Ç—å—é –≤–∏–¥–∏–º–æ—Å—Ç–∏:', registration.scope);
      })
      .catch((error) => {
        console.error('Service Worker: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      });
  });
}

// === –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏ ===
const networkStatusIndicator = document.createElement('div');
networkStatusIndicator.id = 'network-status';
document.body.appendChild(networkStatusIndicator);

function updateNetworkStatus() {
  if (navigator.onLine) {
    networkStatusIndicator.textContent = '–û–Ω–ª–∞–π–Ω';
    networkStatusIndicator.style.backgroundColor = '#d4edda'; // –ó–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
    networkStatusIndicator.style.color = '#155724'; // –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç
     console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–Ω–æ–≤–∞ –æ–Ω–ª–∞–π–Ω. –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤.');
     fetchProducts(); // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
  } else {
    networkStatusIndicator.textContent = '–û—Ñ—Ñ–ª–∞–π–Ω';
    networkStatusIndicator.style.backgroundColor = '#f8d7da'; // –ö—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
    networkStatusIndicator.style.color = '#721c24'; // –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç
  }
  networkStatusIndicator.style.display = 'block';
   if (navigator.onLine) {
       // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
       setTimeout(() => {
           networkStatusIndicator.style.display = 'none';
       }, 3000);
   }
}

window.addEventListener('online', updateNetworkStatus);
window.addEventListener('offline', updateNetworkStatus);


// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –ê–í–¢–û–î–û–ü–û–õ–ù–ï–ù–ò–Ø ---
function getFilteredProducts(inputValue) {
     inputValue = inputValue.trim().toLowerCase();

    if (!inputValue) {
        return [];
    }

    let exactMatch = null;
     // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
     if (/^\d+$/.test(inputValue)) {
        exactMatch = products.find(p => p.id && p.id.toLowerCase() === inputValue);
     }
     if (!exactMatch) {
         exactMatch = products.find(p => p.name.toLowerCase() === inputValue);
     }


    const startsWithId = [];
    const startsWithName = [];
    const containsId = [];
    const containsName = [];

    // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for (const p of products) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º—ã —É–∂–µ –Ω–∞—à–ª–∏
        if (exactMatch && (p.id === exactMatch.id || (!p.id && p.name === exactMatch.name))) {
             continue;
        }

        const nameLower = p.name.toLowerCase();
        const idLower = p.id ? p.id.toLowerCase() : '';

        if (idLower.startsWith(inputValue)) {
           startsWithId.push(p);
        } else if (nameLower.startsWith(inputValue)) {
           startsWithName.push(p);
        } else if (idLower.includes(inputValue)) {
           containsId.push(p);
        } else if (nameLower.includes(inputValue)) {
           containsName.push(p);
        }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ID, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∏–º–µ–Ω–∏, —Å–æ–¥–µ—Ä–∂–∏—Ç ID, —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è
    const ordered = [];
    if (exactMatch) {
        ordered.push(exactMatch);
    }
    ordered.push(...startsWithId, ...startsWithName, ...containsId, ...containsName);

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueOrdered = [];
    const seen = new Set();

    for (const product of ordered) {
        const key = product.id || product.name; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–ª–∏ –∏–º—è –∫–∞–∫ –∫–ª—é—á –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        if (!seen.has(key)) {
             uniqueOrdered.push(product);
             seen.add(key);
        }
    }

    return uniqueOrdered;
}

function updateSuggestionsUI(nameInput, suggestionsDropdown) {
     const inputValue = nameInput.value.trim();
    const filteredProducts = getFilteredProducts(inputValue);

    suggestionsDropdown.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    nameInput.removeAttribute('aria-activedescendant'); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º aria-–∞—Ç—Ä–∏–±—É—Ç

    const limitedResults = filteredProducts.slice(0, 100); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    if (limitedResults.length > 0) {
        limitedResults.forEach((product, index) => {
            const itemElement = document.createElement('div');
            itemElement.classList.add('suggestion-item');
            itemElement.setAttribute('role', 'option');
            itemElement.setAttribute('tabindex', '-1'); // –î–µ–ª–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–º, –Ω–æ –Ω–µ –≤ –æ–±—ã—á–Ω–æ–º –ø–æ—Ç–æ–∫–µ Tab

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è aria-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if (!suggestionsDropdown.id) {
                 suggestionsDropdown.id = 'suggestions-dropdown-' + nameInput.closest('tr').rowIndex;
             }
            itemElement.id = `${suggestionsDropdown.id}-item-${index}`;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –≤ data-–∞—Ç—Ä–∏–±—É—Ç–∞—Ö
            itemElement.dataset.productId = product.id;
            itemElement.dataset.productName = product.name;
            itemElement.dataset.productUnit = product.unit;
            itemElement.dataset.productCountry = product.country;
            itemElement.dataset.productPrice = product.price;

            const mainLine = document.createElement('div');
            mainLine.classList.add('main-line');
            mainLine.textContent = `${product.id ? product.id + ' - ' : ''}${product.name}`; // –§–æ—Ä–º–∞—Ç: ID - –ù–∞–∑–≤–∞–Ω–∏–µ

            const detailsLine = document.createElement('div');
            detailsLine.classList.add('details-line');
            const formattedPrice = formatNumberDisplay(product.price);
            detailsLine.textContent = `${product.country} ¬∑ ${formattedPrice} ¬∑ ${product.unit}`; // –§–æ—Ä–º–∞—Ç: –°—Ç—Ä–∞–Ω–∞ ¬∑ –¶–µ–Ω–∞ ¬∑ –ï–¥.–∏–∑–º.

            itemElement.appendChild(mainLine);
            itemElement.appendChild(detailsLine);

             // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ mousedown, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å blur –Ω–∞ input –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
             itemElement.addEventListener('mousedown', () => {
                nameInput._isSelectingSuggestion = true;
            });

             // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
            itemElement.addEventListener('mousedown', () => {
                console.log('Suggestion item clicked.');
                try {
                     const selectedProduct = {
                         id: itemElement.dataset.productId,
                         name: itemElement.dataset.productName,
                         unit: itemElement.dataset.productUnit,
                         country: itemElement.dataset.productCountry,
                         price: parseFormattedNumber(itemElement.dataset.productPrice)
                     };

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                    nameInput.value = selectedProduct.name;
                    console.log('Input value set by suggestion click:', nameInput.value);

                    // –í—ã–∑—ã–≤–∞–µ–º onNameChange –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —è—á–µ–µ–∫ —Å—Ç—Ä–æ–∫–∏
                    // –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ —Ç–∞–∫ –∫–∞–∫ –º—ã –≤—ã–±—Ä–∞–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞, valueChanged –±—É–¥–µ—Ç true
                    onNameChange(nameInput.closest('tr'), nameInput.dataset.prevValue || '');


                    // –°–∫—Ä—ã–≤–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
                    suggestionsDropdown.style.display = 'none';
                    nameInput._isSelectingSuggestion = false;
                    const tr = nameInput.closest('tr');
                    const qtyInput = tr.querySelector('.qty-input');

                    if (qtyInput) {
                        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                         setTimeout(() => {
                             qtyInput.focus();
                         }, 0);
                    }

                } catch (error) {
                    console.error('Error during suggestion item click handling:', error);
                    nameInput._isSelectingSuggestion = false; // –í–∞–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                }
            });

            suggestionsDropdown.appendChild(itemElement);
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º aria-–∞—Ç—Ä–∏–±—É—Ç—ã
        suggestionsDropdown.style.display = 'block';
        suggestionsDropdown.setAttribute('role', 'listbox');
        nameInput.setAttribute('aria-expanded', 'true');
         if (!suggestionsDropdown.id) {
             suggestionsDropdown.id = 'suggestions-dropdown-' + nameInput.closest('tr').rowIndex;
         }
         nameInput.setAttribute('aria-controls', suggestionsDropdown.id);
         nameInput.setAttribute('aria-haspopup', 'listbox');
         nameInput.setAttribute('aria-autocomplete', 'list');

    } else {
        // –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ—Ç, —Å–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º aria-–∞—Ç—Ä–∏–±—É—Ç—ã
        suggestionsDropdown.style.display = 'none';
        nameInput.setAttribute('aria-expanded', 'false');
        nameInput.removeAttribute('aria-controls');
        nameInput.removeAttribute('aria-activedescendant');
        nameInput._isSelectingSuggestion = false; // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ñ–ª–∞–≥ —Å–±—Ä–æ—à–µ–Ω
    }
}


// --- –§—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV, –ø–µ—á–∞—Ç–∏, —Å–Ω–∏–º–∫–∞ ---

function escapeCsvString(str) {
      if (str === null || str === undefined) {
        return '';
    }
    str = String(str);
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—Ç–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏ –¥–≤–æ–π–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏
    const escaped = str.replace(/"/g, '""');
    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (—Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π),
    // –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏, —Å–∏–º–≤–æ–ª—ã –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Ç–∞–±—É–ª—è—Ü–∏–∏.
    if (escaped.includes(';') || escaped.includes('"') || escaped.includes('\n') || escaped.includes('\r') || escaped.includes('\t')) {
        return `"${escaped}"`;
    }
    return escaped;
}

function exportTableToCsv() {
  let csv = [];
  const headerRow = productTable.querySelector('thead tr');
  if (headerRow) {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–ª–æ–Ω–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
      const existingHeaderCells = headerRow.querySelectorAll('th:not(:last-child)');
      // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –¥–æ–±–∞–≤–ª—è—è "ID" –≤ –Ω–∞—á–∞–ª–æ
      const headerData = [escapeCsvString("ID"), ...Array.from(existingHeaderCells).map(th => escapeCsvString(th.textContent.trim()))];
      csv.push(headerData.join(';'));
  }

  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º —Ç–µ–ª–∞ —Ç–∞–±–ª–∏—Ü—ã
  tableBody.querySelectorAll('tr').forEach(tr => {
      const cells = tr.querySelectorAll('td');
      const nameInput = tr.querySelector('.name-input');
      const qtyInput = tr.querySelector('.qty-input');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è—á–µ–µ–∫ –∏ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
      if (cells.length >= 7 && nameInput && qtyInput) {
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞ –∏–ª–∏ –ø–æ–ª—è –≤–≤–æ–¥–∞
          const productId = tr.dataset.productId || '';
          const name = nameInput.value || '';
          const unit = cells[2] ? cells[2].textContent.trim() : '';
          const country = cells[3] ? cells[3].textContent.trim() : '';
          // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Ü–µ–Ω—ã, –∑–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫—É –Ω–∞ –∑–∞–ø—è—Ç—É—é –¥–ª—è CSV
          const qtyStr = (qtyInput.value || '').replace('.', ',');
          const priceStr = (cells[5] ? cells[5].dataset.price || '0' : '0').replace('.', ',');
          const sumStr = (cells[6] ? cells[6].dataset.sum || '0' : '0').replace('.', ',');

          // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É CSV –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
          const rowCsv = [
              escapeCsvString(productId),
			  escapeCsvString(cells[0] ? cells[0].textContent.trim() : ''), // –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
              escapeCsvString(name),
              escapeCsvString(unit),
              escapeCsvString(country),
              escapeCsvString(qtyStr),
              escapeCsvString(priceStr),
              escapeCsvString(sumStr)
          ];
          csv.push(rowCsv.join(';'));
      }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã –≤ CSV
  const footerRow = productTable.querySelector('tfoot tr');
  if (footerRow) {
      const footerCells = footerRow.querySelectorAll('td');
      const totalFooterData = [];
      const exportColumnCount = 7; // –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ (ID, ‚Ññ, –ù–∞–∑–≤–∞–Ω–∏–µ, –ï–¥.–∏–∑–º, –°—Ç—Ä–∞–Ω–∞, –ö–æ–ª-–≤–æ, –¶–µ–Ω–∞, –°—É–º–º–∞)

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç "–ò—Ç–æ–≥–æ" –∏–ª–∏ –∏–∑ –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–∏ –ø–æ–¥–≤–∞–ª–∞
      if (footerCells[1]) { // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ "–ò—Ç–æ–≥–æ" –≤–æ –≤—Ç–æ—Ä–æ–π —è—á–µ–π–∫–µ –ø–æ–¥–≤–∞–ª–∞
           totalFooterData.push(escapeCsvString(footerCells[1].textContent.trim()));
      } else {
           totalFooterData.push('');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–æ –∫–æ–ª–æ–Ω–∫–∏ —Å —Å—É–º–º–æ–π
      const emptyCellsCount = exportColumnCount - 2; // –û—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –∫–æ–ª–æ–Ω–æ–∫ –≤—ã—á–∏—Ç–∞–µ–º "–ò—Ç–æ–≥–æ" –∏ "–°—É–º–º–∞"
      for(let i = 0; i < emptyCellsCount; i++) {
           totalFooterData.push('');
      }

       // –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
       if (totalSumCell) {
            const totalSumValue = String(parseFloat(totalSumCell.dataset.total || 0)).replace('.', ',');
            totalFooterData.push(escapeCsvString(totalSumValue));
       } else {
           totalFooterData.push('');
       }

       csv.push(totalFooterData.join(';'));
  }


  const csvString = csv.join('\r\n'); // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
  const BOM = '\uFEFF'; // –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ Excel
  const blob = new Blob([BOM + csvString], { type: 'text/csv;charset=utf-8;' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.setAttribute('href', url);

  // –ò–º—è —Ñ–∞–π–ª–∞ –±–µ—Ä–µ–º –∏–∑ viewMetadata –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const viewName = viewMetadata[activeViewId] ? viewMetadata[activeViewId].trim() : '—Ç–∞–±–ª–∏—Ü–∞';
  const filename = `${viewName.replace(/[^a-z–∞-—è0-9]/gi, '_')}.csv`;

  link.setAttribute('download', filename);
  document.body.appendChild(link); // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ DOM –≤—Ä–µ–º–µ–Ω–Ω–æ
  link.click(); // –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  document.body.removeChild(link); // –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É –∏–∑ DOM
  URL.revokeObjectURL(url); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
  console.log(`Table for view '${viewName}' exported to CSV.`);
}

function printTable() {
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –¥–∞—Ç—ã –≤ —à–∞–ø–∫–µ –¥–ª—è –ø–µ—á–∞—Ç–∏
    const dateElement = document.querySelector('.print-header-text .print-date');
    let originalDateText = ''; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

    if (dateElement) {
        originalDateText = dateElement.textContent; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
        const today = new Date();
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        const options = { year: 'numeric', month: 'long', day: 'numeric' };
        const formattedDate = today.toLocaleDateString('ru-RU', options);
        dateElement.textContent = formattedDate; // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        console.log('–í—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏:', formattedDate);
    }

    // –í—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–∫–Ω–æ –ø–µ—á–∞—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    window.print();

    // –û—á–∏—â–∞–µ–º –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–∞—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—á–∞—Ç–∏
    if (dateElement) {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω—É–∂–Ω–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ window.print –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞
        setTimeout(() => {
             dateElement.textContent = originalDateText; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–∏–ª–∏ –æ—á–∏—â–∞–µ–º)
             console.log('–û—á–∏—â–µ–Ω–∞ –¥–∞—Ç–∞ –ø–æ—Å–ª–µ –ø–µ—á–∞—Ç–∏.');
        }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    }
}

function captureTableSnapshot() {
    const elementToCapture = document.getElementById('main-content'); // –≠—Ç–æ .container
    const productTableElement = document.getElementById('product-table'); // –°–∞–º–∞ —Ç–∞–±–ª–∏—Ü–∞

    if (!elementToCapture) {
        console.error('–û—à–∏–±–∫–∞: –≠–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å ID "main-content" –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞.');
        return;
    }

    console.log('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Å–Ω–∏–º–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –º–µ–¥–∏–∞–∑–∞–ø—Ä–æ—Å–æ–≤...');

    // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞
    const appHeader = document.getElementById('app-header');
    const appFooter = document.getElementById('app-footer');
    const sideMenu = document.getElementById('side-menu');
    const networkStatus = document.getElementById('network-status');

    // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ª–æ–≥–æ—Ç–∏–ø–æ–º
    const printHeaderTextElement = elementToCapture.querySelector('.print-header-text');
    const printHeaderImageDiv = elementToCapture.querySelector('.print-header-image');
    // –ù–∞–º –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø—Ä—è–º—É—é —Å–∫—Ä—ã–≤–∞—Ç—å .company-name, –µ—Å–ª–∏ –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—å (printHeaderTextElement) —Å–∫—Ä—ã—Ç.
    // –ï—Å–ª–∏ .company-name –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–Ω–µ .print-header-text, —Ç–æ–≥–¥–∞ –µ–≥–æ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –∏ —Å–∫—Ä—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ.

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —á—å–∏ —Å–≤–æ–π—Å—Ç–≤–∞ transform/width/overflow –º—ã –º–µ–Ω—è–µ–º
    const originalContainerTransform = elementToCapture.style.transform;
    const originalContainerWidth = elementToCapture.style.width;
    const originalContainerOverflowX = elementToCapture.style.overflowX;
    const originalContainerPadding = elementToCapture.style.padding;
    const originalProductTableTransform = productTableElement ? productTableElement.style.transform : '';
    const originalProductTableWidth = productTableElement ? productTableElement.style.width : '';
    const originalProductTableMaxWidth = productTableElement ? productTableElement.style.maxWidth : '';
    const originalProductTableTableLayout = productTableElement ? productTableElement.style.tableLayout : '';

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º display –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫—Ä—ã–≤–∞–µ–º
    const originalAppHeaderDisplay = appHeader ? appHeader.style.display : '';
    const originalAppFooterDisplay = appFooter ? appFooter.style.display : '';
    const originalSideMenuDisplay = sideMenu ? sideMenu.style.display : '';
    const originalNetworkStatusDisplay = networkStatus ? networkStatus.style.display : '';

    // *** –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ display —Å—Ç–∏–ª–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ª–æ–≥–æ—Ç–∏–ø–∞ ***
    const originalPrintHeaderTextDisplay = printHeaderTextElement ? printHeaderTextElement.style.display : '';
    const originalPrintHeaderImageDisplay = printHeaderImageDiv ? printHeaderImageDiv.style.display : '';


    // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –º–µ–¥–∏–∞–∑–∞–ø—Ä–æ—Å–æ–≤ (–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç.–¥.)
    elementToCapture.style.cssText += 'transform: none !important; width: auto !important; max-width: none !important; overflow-x: visible !important; padding: 20px !important;';
    if (productTableElement) {
        productTableElement.style.cssText += 'transform: none !important; width: auto !important; max-width: none !important; table-layout: auto !important;';
    }

    // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã UI
    if (appHeader) appHeader.style.display = 'none';
    if (appFooter) appFooter.style.display = 'none';
    if (sideMenu) sideMenu.style.display = 'none';
    if (networkStatus) networkStatus.style.display = 'none';

    // *** –ù–û–í–û–ï: –í—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ª–æ–≥–æ—Ç–∏–ø–∞ ***
    if (printHeaderTextElement) printHeaderTextElement.style.display = 'none';
    if (printHeaderImageDiv) printHeaderImageDiv.style.display = 'none';


    // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü "–£–¥–∞–ª–∏—Ç—å" –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ, —Ç–µ–ª–µ –∏ –ø–æ–¥–≤–∞–ª–µ —Ç–∞–±–ª–∏—Ü—ã –≤–Ω—É—Ç—Ä–∏ elementToCapture
    const actionHeaders = elementToCapture.querySelectorAll('thead th:last-child');
    const actionCells = elementToCapture.querySelectorAll('tbody td:last-child');
    const footerActionCell = elementToCapture.querySelector('tfoot td:last-child');

    actionHeaders.forEach(th => th.style.display = 'none');
    actionCells.forEach(td => td.style.display = 'none');
    if (footerActionCell) footerActionCell.style.display = 'none';

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∏—Ä–∏–Ω—É –¥–ª—è html2canvas –Ω–∞ –æ—Å–Ω–æ–≤–µ scrollWidth
    const captureWidth = Math.max(elementToCapture.scrollWidth, productTableElement ? productTableElement.scrollWidth : 0);
    const captureHeight = elementToCapture.scrollHeight;

    html2canvas(elementToCapture, {
        scale: 2, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        logging: true,
        useCORS: true,
        width: captureWidth,   // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É
        height: captureHeight, // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É
        scrollY: -window.scrollY // –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    }).then(canvas => {
        console.log('–°–Ω–∏–º–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –Ω–∞ Canvas.');
        const dataUrl = canvas.toDataURL('image/png');
        const link = document.createElement('a');
        link.href = dataUrl;

        const viewName = viewMetadata[activeViewId] ? viewMetadata[activeViewId].trim() : '—Ç–∞–±–ª–∏—Ü–∞';
        const filename = `${viewName.replace(/[^a-z–∞-—è0-9]/gi, '_')}_—Å–Ω–∏–º–æ–∫.png`;

        link.setAttribute('download', filename);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        console.log('–°–Ω–∏–º–æ–∫ –∑–∞—Ö–≤–∞—á–µ–Ω, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ.');

    }).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–Ω–∏–º–∫–∞:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–Ω–∏–º–∫–∞.');
    }).finally(() => {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
        elementToCapture.style.transform = originalContainerTransform;
        elementToCapture.style.width = originalContainerWidth;
        elementToCapture.style.overflowX = originalContainerOverflowX;
        elementToCapture.style.padding = originalContainerPadding;

        if (productTableElement) {
            productTableElement.style.transform = originalProductTableTransform;
            productTableElement.style.width = originalProductTableWidth;
            productTableElement.style.maxWidth = originalProductTableMaxWidth;
            productTableElement.style.tableLayout = originalProductTableTableLayout;
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º display –¥–ª—è —Å–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI
        if (appHeader) appHeader.style.display = originalAppHeaderDisplay;
        if (appFooter) appFooter.style.display = originalAppFooterDisplay;
        if (sideMenu) sideMenu.style.display = originalSideMenuDisplay;
        if (networkStatus) networkStatus.style.display = originalNetworkStatusDisplay;

        // *** –ù–û–í–û–ï: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º display —Å—Ç–∏–ª–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ª–æ–≥–æ—Ç–∏–ø–∞ ***
        if (printHeaderTextElement) printHeaderTextElement.style.display = originalPrintHeaderTextDisplay;
        if (printHeaderImageDiv) printHeaderImageDiv.style.display = originalPrintHeaderImageDisplay;


        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º display –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ "–£–¥–∞–ª–∏—Ç—å"
        actionHeaders.forEach(th => th.style.display = '');
        actionCells.forEach(td => td.style.display = '');
        if (footerActionCell) footerActionCell.style.display = '';
    });
}
// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ Google Sheets ---
async function fetchProducts() {
   try {
    const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${RANGE}?key=${API_KEY}`;
    const res = await fetch(url);
    if (!res.ok) {
        const errorText = await res.text();
        throw new Error(`HTTP error! status: ${res.status}, Body: ${errorText}`);
    }
    const json = await res.json();
    if (json.values && Array.isArray(json.values)) {
        const dataRows = json.values.slice(1); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–æ–∫–∏
        products = dataRows.map(r => ({
          id:      r[0] ? String(r[0]).trim() : '', // ID —Ç–æ–≤–∞—Ä–∞
          name:    r[1] ? String(r[1]).trim() : '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è', // –ù–∞–∑–≤–∞–Ω–∏–µ
          unit:    r[2] ? String(r[2]).trim() : '', // –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
          country: r[3] ? String(r[3]).trim() : '', // –°—Ç—Ä–∞–Ω–∞
          price:   parseFormattedNumber(r[4]) // –¶–µ–Ω–∞ (–ø–∞—Ä—Å–∏–º —Å—Ä–∞–∑—É)
        })).filter(p => p.name !== '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è' && p.name !== ''); // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è

        console.log('Products fetched:', products);
    } else {
        console.error('Fetched data has unexpected format:', json);
        alert('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.');
    }
  } catch (error) {
    console.error('Error fetching products:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á API, ID —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–∏–∞–ø–∞–∑–æ–Ω.');
  }
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ —Ç–∞–±–ª–∏—Ü—ã ---
function addRow(focusLastNameInput = true) {
   console.log('Adding a new row...'); // –õ–æ–≥ –≤—ã–∑–æ–≤–∞ addRow
   const tr = document.createElement('tr');
    const rowCount = tableBody.rows.length;

    tr.innerHTML = `
        <td class="row-num">${rowCount + 1}</td>
        <td>
            <input type="text" class="name-input" autocomplete="off" placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å" />
            <div class="suggestions-dropdown"></div>
        </td>
        <td class="unit-cell"></td>
        <td class="country-cell"></td>
        <td>
            <input type="text" class="qty-input" inputmode="decimal" pattern="\\d*([.,]\\d*)?" />
        </td>
        <td class="price-cell" data-price="0">0</td>
        <td class="sum-cell" data-sum="0">0</td>
        <td><span class="delete-btn">‚úï</span></td>
    `;

    const nameInput = tr.querySelector('.name-input');
    const qtyInput = tr.querySelector('.qty-input');
    const delBtn = tr.querySelector('.delete-btn');
    const suggestionsDropdown = tr.querySelector('.suggestions-dropdown');

    nameInput._isSelectingSuggestion = false;

    // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–û–õ–Ø –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–Ø (–ë–ï–ó PASTE - PASTE –î–ï–õ–ï–ì–ò–†–û–í–ê–ù) ---
    nameInput.addEventListener('input', () => updateSuggestionsUI(nameInput, suggestionsDropdown));
    // Store the value on focus
    nameInput.addEventListener('focus', () => {
        nameInput.dataset.prevValue = nameInput.value;
        updateSuggestionsUI(nameInput, suggestionsDropdown);
    });
    // Check for changes on blur and call onNameChange accordingly
    nameInput.addEventListener('blur', (e) => {
        setTimeout(() => {
            if (!nameInput._isSelectingSuggestion) {
                suggestionsDropdown.style.display = 'none';
                nameInput.setAttribute('aria-expanded', 'false');
                const previousValue = nameInput.dataset.prevValue || ''; // Get stored value
                onNameChange(tr, previousValue); // Pass previous value to onNameChange
            } else {
                 nameInput._isSelectingSuggestion = false;
            }
        }, 150); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∫–ª–∏–∫ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é —É—Å–ø–µ–ª —Å—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ blur
    });
    // Removed saveAppStateToLocalStorage from change listener as onNameChange handles saving
    nameInput.addEventListener('change', () => {
        // Focus on quantity input if name is not empty
        if (nameInput.value.trim() !== '') {
            const qtyInput = tr.querySelector('.qty-input');
            if (qtyInput) {
                qtyInput.focus();
            }
        }
    });
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (—Å—Ç—Ä–µ–ª–∫–∏, Enter, Escape, Tab) –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    nameInput.addEventListener('keydown', (e) => handleNameInputKeydown(e, nameInput, suggestionsDropdown));


    // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–û–õ–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê (–ë–ï–ó PASTE - PASTE –î–ï–õ–ï–ì–ò–†–û–í–ê–ù) ---
    qtyInput.addEventListener('input', () => onQtyChange(tr));
    qtyInput.addEventListener('blur', () => {
        const sanitizedString = sanitizeQtyInput(qtyInput);
        const finalQty = parseFormattedNumber(sanitizedString);
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        qtyInput.value = finalQty > 0 ? formatNumberDisplay(finalQty) : (sanitizedString === '0.' ? '0.' : '');
        onQtyChange(tr); // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        saveAppStateToLocalStorage(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    });
    // –ó–∞–ø—Ä–µ—Ç –≤–≤–æ–¥–∞ –Ω–µ—á–∏—Å–ª–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–∫—Ä–æ–º–µ —Ç–æ—á–∫–∏/–∑–∞–ø—è—Ç–æ–π –∏ —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∫–ª–∞–≤–∏—à)
    qtyInput.addEventListener('keydown', e => handleQtyInputKeydownNum(e));
    // –ü–µ—Ä–µ—Ö–æ–¥ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ Enter/Tab
    qtyInput.addEventListener('keydown', async (e) => handleQtyInputKeydownNav(e, tr, qtyInput));


    // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –£–î–ê–õ–ï–ù–ò–Ø –°–¢–†–û–ö–ò ---
    delBtn.addEventListener('click', () => {
        deleteRow(tr);
        saveAppStateToLocalStorage();
    });

    tableBody.appendChild(tr);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ nameInput –ø–µ—Ä–≤–æ–π –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (focusLastNameInput) {
        setTimeout(() => {
            nameInput.focus();
        }, 0);
    }
     console.log('Row added. Row count:', tableBody.rows.length);
     return tr; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
}

// Modified onNameChange function to accept previousValue and check for changes
function onNameChange(tr, previousValue = '') {
   let input = tr.querySelector('.name-input');
    let inputValue = input ? input.value.trim() : '';
    let product = null;

    const unitCell = tr.querySelector('.unit-cell');
    const countryCell = tr.querySelector('.country-cell');
    const priceCell = tr.querySelector('.price-cell');
    const qtyInput = tr.querySelector('.qty-input');
    const sumCell = tr.querySelector('.sum-cell');

    // Determine if the value has changed from the previous value on focus
    const valueChanged = inputValue !== previousValue.trim();
    console.log(`onNameChange called for row ${tr.rowIndex}. Current: "${inputValue}", Previous: "${previousValue}". Value Changed: ${valueChanged}`);


    if (inputValue) {
         // Search for product by name (case-insensitive)
         product = products.find(p => p.name.toLowerCase() === inputValue.toLowerCase());

         // If not found by name, and input looks like an ID, search by ID
         if (!product && /^\d+$/.test(inputValue)) {
             product = products.find(p => p.id && p.id.trim() === inputValue.trim());
         }
    }

    if (product) {
        // Product found
        tr.dataset.productId = product.id; // Save ID
        input.value = product.name; // Set the found product name

        // Always update linked cells with product data
        unitCell.textContent = product.unit;
        countryCell.textContent = product.country;
        priceCell.dataset.price = product.price;
        priceCell.textContent = formatNumberDisplay(product.price);

        // Clear quantity and sum ONLY if the value changed before blur
        if (valueChanged) {
            console.log('Product found and value changed. Clearing qty/sum.');
            qtyInput.value = '';
            sumCell.dataset.sum = 0;
            sumCell.textContent = formatNumberDisplay(0);
        } else {
             console.log('Product found, but value did not change. Keeping current qty/sum.');
             // If value didn't change and product is the same (or was already found),
             // keep the existing quantity and sum. Recalculate sum based on current qty and price.
             const currentQty = parseFormattedNumber(qtyInput.value);
             const currentPrice = parseFloat(priceCell.dataset.price) || 0;
             const newSum = currentQty * currentPrice;
             sumCell.dataset.sum = newSum;
             sumCell.textContent = formatNumberDisplay(newSum);
        }

        input.classList.remove('input-error'); // Remove error class
    } else {
        // Product not found
         delete tr.dataset.productId; // Remove ID

         // Clear linked cells (unit, country, price, sum) and quantity
         // ONLY if the value changed OR if the input is currently empty.
         // If value did NOT change AND is NOT empty, we keep existing data (including error state if any).
         if (valueChanged || inputValue === '') {
              console.log('Product not found, and value changed or is empty. Clearing all linked cells.');
              // Clear unit, country, price, sum
              unitCell.textContent = '';
              countryCell.textContent = '';
              priceCell.dataset.price = 0;
              priceCell.textContent = formatNumberDisplay(0);

              // Clear quantity
              qtyInput.value = '';
              sumCell.dataset.sum = 0;
              sumCell.textContent = formatNumberDisplay(0);
         } else {
              console.log('Product not found, but value did not change and is not empty. Keeping existing data.');
              // If value didn't change and no product is found (meaning the previously entered text
              // also didn't match a product), keep the existing text, quantity, unit, country, price, and sum.
              // The error class should already be present if the text is not empty and doesn't match.
         }


         // Add or remove error class based on the *current* input value
         // If the current value is not empty and doesn't match any product, add error class.
         // If it's empty, remove error class.
         if (inputValue !== '' && !products.some(p => p.name.toLowerCase() === inputValue.toLowerCase() || (p.id && p.id.trim() === inputValue.trim()))) {
            input.classList.add('input-error');
         } else {
            input.classList.remove('input-error');
         }
    }

    recalcTotal(); // Recalculate total sum
    saveAppStateToLocalStorage(); // Save application state
}

function onQtyChange(tr) {
    const qtyInput = tr.querySelector('.qty-input');
    const priceCell = tr.querySelector('.price-cell');
    const sumCell = tr.querySelector('.sum-cell');

    const price = parseFloat(priceCell.dataset.price) || 0; // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞
    const quantity = parseFormattedNumber(qtyInput.value); // –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞

    const sum = price * quantity; // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É

    sumCell.dataset.sum = sum; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ data-–∞—Ç—Ä–∏–±—É—Ç–µ
    sumCell.textContent = formatNumberDisplay(sum); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É

    recalcTotal(); // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
    saveAppStateToLocalStorage(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
}

function deleteRow(tr) {
    // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π, —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é
    if (tableBody.rows.length > 1) {
        tr.remove(); // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–æ–∫–∏ –∏–∑ DOM
        renumberRows(); // –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏
    } else {
        // –ï—Å–ª–∏ —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –µ–µ –ø–æ–ª—è
        const nameInput = tr.querySelector('.name-input');
        const qtyInput = tr.querySelector('.qty-input');
        const unitCell = tr.querySelector('.unit-cell');
        const countryCell = tr.querySelector('.country-cell');
        const priceCell = tr.querySelector('.price-cell');
        const sumCell = tr.querySelector('.sum-cell');

        if (nameInput) nameInput.value = '';
        if (qtyInput) qtyInput.value = '';
        if(unitCell) unitCell.textContent = '';
        if(countryCell) countryCell.textContent = '';
        if(priceCell) { priceCell.dataset.price = 0; priceCell.textContent = formatNumberDisplay(0); }
        if(sumCell) { sumCell.dataset.sum = 0; sumCell.textContent = formatNumberDisplay(0); }
        delete tr.dataset.productId; // –£–¥–∞–ª—è–µ–º ID —Ç–æ–≤–∞—Ä–∞

        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        if (nameInput) nameInput.classList.remove('input-error');
    }
    recalcTotal(); // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
    saveAppStateToLocalStorage(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
}

function renumberRows() {
   // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
   tableBody.querySelectorAll('tr').forEach((tr, i) => {
    const rowNumCell = tr.querySelector('.row-num');
    if (rowNumCell) {
      rowNumCell.textContent = i + 1;
    }
  });
}

function recalcTotal() {
   // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º
   const sumCells = tableBody.querySelectorAll('.sum-cell');
  let total = 0;

  sumCells.forEach(td => {
    total += parseFloat(td.dataset.sum) || 0; // –°—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤
  });

  totalSumCell.dataset.total = total; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤ data-–∞—Ç—Ä–∏–±—É—Ç–µ
  totalSumCell.textContent = formatNumberDisplay(total); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ–±—â—É—é —Å—É–º–º—É
}

function sanitizeQtyInput(qtyInput) {
     let v = qtyInput.value.trim();
    if (v === '') return '';

    v = v.replace(',', '.'); // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
    v = v.replace(/[^0-9.]/g, ''); // –£–¥–∞–ª—è–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏
    v = v.replace(/^0+(?=\d)/, ''); // –£–¥–∞–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω—É–ª–∏, –µ—Å–ª–∏ –∑–∞ –Ω–∏–º–∏ —Å–ª–µ–¥—É–µ—Ç —Ü–∏—Ñ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 007 -> 7)

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
    const parts = v.split('.');
    if (parts.length > 2) {
        v = parts[0] + '.' + parts.slice(1).join(''); // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É
    }

    // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ —Ç–æ—á–∫–∞ –∏–ª–∏ –Ω—É–ª–∏ —Å —Ç–æ—á–∫–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "."), –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ "0."
    if (v === '.' || /^0*\.$/.test(v)) v = '0.';

    // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Ç–æ—á–∫—É –∏ –ø–µ—Ä–µ–¥ –Ω–µ–π –Ω–µ—Ç —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, "abc."), —É–¥–∞–ª—è–µ–º —Ç–æ—á–∫—É
     if (v.endsWith('.') && v.length > 1 && !/\d/.test(v.slice(0, -1))) {
         v = v.slice(0, -1);
     } else if (v.endsWith('.') && v.length === 1 && v[0] !== '0') { // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç–æ—á–∫–∞ –Ω–µ –ø–æ—Å–ª–µ –Ω—É–ª—è
         v = ''; // –û—á–∏—â–∞–µ–º
     }


    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è "0" –∏–ª–∏ "0."
     if (v !== '' && parseFloat(v) === 0) {
         const originalValue = qtyInput.value.trim().replace(',', '.');
         // –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ "0" –∏–ª–∏ "0.", –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ "0.", –æ—á–∏—â–∞–µ–º
         if (/^0+\.?0*$/.test(originalValue) && v !== '0.') {
             v = '';
         }
     }


  return v;
}


// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–ù–ï –í–ö–õ–Æ–ß–ê–Ø PASTE) ---
function reAttachEventListenersToRows() {
    console.log('Re-attaching non-paste event listeners to rows...');
    tableBody.querySelectorAll('tr').forEach(tr => {
        const nameInput = tr.querySelector('.name-input');
        const qtyInput = tr.querySelector('.qty-input');
        const delBtn = tr.querySelector('.delete-btn');
        const suggestionsDropdown = tr.querySelector('.suggestions-dropdown');

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ù–ï-PASTE –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è nameInput
        if (nameInput && suggestionsDropdown) {
            console.log('Attaching non-paste listeners to nameInput in row:', tr.rowIndex);
            if (nameInput._inputHandler) nameInput.removeEventListener('input', nameInput._inputHandler);
            if (nameInput._focusHandler) nameInput.removeEventListener('focus', nameInput._focusHandler);
            if (nameInput._blurHandler) nameInput.removeEventListener('blur', nameInput._blurHandler);
            if (nameInput._changeHandler) nameInput.removeEventListener('change', nameInput._changeHandler);
            if (nameInput._keydownHandler) nameInput.removeEventListener('keydown', nameInput._keydownHandler);
             // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ _pasteHandler –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —ç—Ç–æ–º scope
            delete nameInput._pasteHandler;


            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            nameInput._inputHandler = () => updateSuggestionsUI(nameInput, suggestionsDropdown);
            nameInput._focusHandler = () => {
                 nameInput.dataset.prevValue = nameInput.value; // Store value on focus
                 updateSuggestionsUI(nameInput, suggestionsDropdown);
            };
            nameInput._blurHandler = (e) => {
                setTimeout(() => {
                    if (!nameInput._isSelectingSuggestion) {
                        suggestionsDropdown.style.display = 'none';
                        nameInput.setAttribute('aria-expanded', 'false');
                        const previousValue = nameInput.dataset.prevValue || ''; // Get stored value
                        onNameChange(tr, previousValue); // Pass previous value
                    } else {
                         nameInput._isSelectingSuggestion = false;
                    }
                }, 150);
            };
            // Removed saveAppStateToLocalStorage from change listener as onNameChange handles saving
             nameInput._changeHandler = () => {
                 if (nameInput.value.trim() !== '') {
                     const qtyInput = tr.querySelector('.qty-input');
                     if (qtyInput) {
                         qtyInput.focus();
                     }
                 }
            };
             nameInput._keydownHandler = (e) => handleNameInputKeydown(e, nameInput, suggestionsDropdown);


            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ù–ï-PASTE –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            nameInput.addEventListener('input', nameInput._inputHandler);
            nameInput.addEventListener('focus', nameInput._focusHandler);
            nameInput.addEventListener('blur', nameInput._blurHandler);
            nameInput.addEventListener('change', nameInput._changeHandler);
            nameInput.addEventListener('keydown', nameInput._keydownHandler);

            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
             suggestionsDropdown.querySelectorAll('.suggestion-item').forEach(item => {
                 // Remove existing handlers first if they were attached directly to items
                 // (Though the addSuggestionItemListeners function handles this when creating)
                 // For safety, if needed, detach here before re-attaching.
                 // Assuming addSuggestionItemListeners is the only place mousedown/click are attached
                 // and it's called within updateSuggestionsUI, these persistent listeners
                 // are handled by re-creating the dropdown content.

                 // We need to re-attach the specific handler logic that calls onNameChange with previousValue
                 if (item._mousedownHandler) item.removeEventListener('mousedown', item._mousedownHandler);
                 if (item._clickHandler) item.removeEventListener('mousedown', item._clickHandler); // Click was mousedown


                 item._mousedownHandler = () => { nameInput._isSelectingSuggestion = true; };
                  // Use mousedown for suggestion click handling as before, and pass prevValue
                 item._clickHandler = () => {
                     console.log('Re-attached suggestion item clicked (mousedown).');
                      try {
                          const selectedProduct = {
                              id: item.dataset.productId,
                              name: item.dataset.productName,
                              unit: item.dataset.productUnit,
                              country: item.dataset.productCountry,
                              price: parseFormattedNumber(item.dataset.productPrice)
                          };
                          nameInput.value = selectedProduct.name;
                           // Pass previousValue here too, as selecting a suggestion IS a change
                           onNameChange(tr, nameInput.dataset.prevValue || '');
                          nameInput._isSelectingSuggestion = false;
                          const qtyInput = tr.querySelector('.qty-input');
                          if (qtyInput) {
                              // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                              setTimeout(() => {
                                  qtyInput.focus();
                              }, 0);
                          }

                      } catch (error) {
                          console.error('Error during re-attached suggestion mousedown handler:', error);
                          nameInput._isSelectingSuggestion = false;
                      }
                 };


                 item.addEventListener('mousedown', item._mousedownHandler);
                 item.addEventListener('mousedown', item._clickHandler); // Still use mousedown for click-like behavior
             });
        }

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ù–ï-PASTE –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è qtyInput
        if (qtyInput) {
             console.log('Attaching non-paste listeners to qtyInput in row:', tr.rowIndex);
             if (qtyInput._inputHandler) qtyInput.removeEventListener('input', qtyInput._inputHandler);
             if (qtyInput._blurHandler) qtyInput.removeEventListener('blur', qtyInput._blurHandler);
             if (qtyInput._keydownNumHandler) qtyInput.removeEventListener('keydown', qtyInput._keydownNumHandler);
             if (qtyInput._keydownNavHandler) qtyInput.removeEventListener('keydown', qtyInput._keydownNavHandler);
            // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ _pasteHandler –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —ç—Ç–æ–º scope
            delete qtyInput._pasteHandler;


             qtyInput._inputHandler = () => onQtyChange(tr);
             qtyInput._blurHandler = () => {
                const sanitizedString = sanitizeQtyInput(qtyInput);
                const finalQty = parseFormattedNumber(sanitizedString);
                qtyInput.value = finalQty > 0 ? formatNumberDisplay(finalQty) : (sanitizedString === '0.' ? '0.' : '');
                onQtyChange(tr);
                saveAppStateToLocalStorage();
            };
             qtyInput._keydownNumHandler = (e) => handleQtyInputKeydownNum(e);
             qtyInput._keydownNavHandler = (e) => handleQtyInputKeydownNav(e, tr, qtyInput);

             // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ù–ï-PASTE –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
             qtyInput.addEventListener('input', qtyInput._inputHandler);
             qtyInput.addEventListener('blur', qtyInput._blurHandler);
             qtyInput.addEventListener('keydown', qtyInput._keydownNumHandler);
             qtyInput.addEventListener('keydown', qtyInput._keydownNavHandler);

             console.log('Non-paste listeners ADDED to qtyInput in row:', tr.rowIndex, qtyInput);
        }

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        if (delBtn) {
            if (delBtn._clickHandler) delBtn.removeEventListener('click', delBtn._clickHandler);
            delBtn._clickHandler = () => {
                 deleteRow(tr);
                 saveAppStateToLocalStorage();
             };
            delBtn.addEventListener('click', delBtn._clickHandler);
        }
    });
     console.log('Non-paste event listeners re-attached completed.');
}


// –ù–£–ñ–ù–´ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò-–û–ë–ï–†–¢–ö–ò –î–õ–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –ö–õ–ê–í–ò–ê–¢–£–†–´ –ò –ê–í–¢–û–î–û–ü–û–õ–ù–ï–ù–ò–Ø
function handleNameInputKeydown(e, nameInput, suggestionsDropdown) {
    const items = suggestionsDropdown.querySelectorAll('.suggestion-item');
    let currentActiveIndex = -1;
    const currentActive = suggestionsDropdown.querySelector('.active-suggestion');
    if (currentActive) {
        currentActiveIndex = Array.from(items).indexOf(currentActive);
    }

    switch (e.key) {
        case 'ArrowDown':
            e.preventDefault();
            if (items.length > 0) {
                if (currentActive) currentActive.classList.remove('active-suggestion');
                const nextIndex = (currentActiveIndex + 1) % items.length;
                items[nextIndex].classList.add('active-suggestion');
                items[nextIndex].scrollIntoView({ block: 'nearest' });
                nameInput.setAttribute('aria-activedescendant', items[nextIndex].id);
            }
            break;
        case 'ArrowUp':
            e.preventDefault();
            if (items.length > 0) {
                if (currentActive) currentActive.classList.remove('active-suggestion');
                const prevIndex = (currentActiveIndex - 1 + items.length) % items.length;
                items[prevIndex].classList.add('active-suggestion');
                items[prevIndex].scrollIntoView({ block: 'nearest' });
                nameInput.setAttribute('aria-activedescendant', items[prevIndex].id);
            }
            break;
        case 'Enter':
            if (currentActive) {
                e.preventDefault();
                // Use mousedown to trigger the suggestion selection logic
                const mousedownEvent = new MouseEvent('mousedown', {
                    bubbles: true,
                    cancelable: true,
                    view: window
                });
                currentActive.dispatchEvent(mousedownEvent);

            } else if (nameInput.value.trim() !== '') {
                 e.preventDefault();
                 // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–æ –µ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–ª—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                 const tr = nameInput.closest('tr');
                 const qtyInput = tr.querySelector('.qty-input');
                 if(qtyInput) qtyInput.focus();
            }
            break;
        case 'Escape':
            suggestionsDropdown.style.display = 'none';
            nameInput.setAttribute('aria-expanded', 'false');
             nameInput.removeAttribute('aria-activedescendant');
            break;
        case 'Tab':
             // –¢–∞–± —Ç–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            suggestionsDropdown.style.display = 'none';
            nameInput.setAttribute('aria-expanded', 'false');
             nameInput.removeAttribute('aria-activedescendant');
            break;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π (using mousedown)
// This function is actually integrated into the mousedown handler in reAttachEventListenersToRows now.
// Leaving it here for reference but it's not called directly anymore.
/*
function handleSuggestionClick(itemElement, nameInput, tr) {
    console.log('Re-attached suggestion item clicked.');
     try {
         const selectedProduct = {
             id: itemElement.dataset.productId,
             name: itemElement.dataset.productName,
             unit: itemElement.dataset.productUnit,
             country: itemElement.dataset.productCountry,
             price: parseFormattedNumber(itemElement.dataset.productPrice)
         };
         nameInput.value = selectedProduct.name;
         // Pass previousValue here too, as selecting a suggestion IS a change
         onNameChange(tr, nameInput.dataset.prevValue || '');
         nameInput._isSelectingSuggestion = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
         const qtyInput = tr.querySelector('.qty-input');
         if (qtyInput) {
             qtyInput.focus(); // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

         }

     } catch (error) {
         console.error('Error during re-attached suggestion click:', error);
         nameInput._isSelectingSuggestion = false;
     }
}
*/

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (—Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, —Ç–æ—á–∫—É, –∑–∞–ø—è—Ç—É—é)
function handleQtyInputKeydownNum(e) {
     // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏: —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∞, –∑–∞–ø—è—Ç–∞—è, Backspace, —Å—Ç—Ä–µ–ª–∫–∏, Delete, Ctrl+C/V/X/A/Z
     const allowedKeys = ['0','1','2','3','4','5','6','7','8','9','. ',',','Backspace','ArrowLeft','ArrowRight','Delete','Tab','Enter'];
     // –†–∞–∑—Ä–µ—à–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è —Å Ctrl/Cmd
     if (e.ctrlKey || e.metaKey) {
         if (['a', 'c', 'v', 'x', 'z'].includes(e.key.toLowerCase())) return;
     }
     // –ï—Å–ª–∏ –∫–ª–∞–≤–∏—à–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –∏ —ç—Ç–æ –Ω–µ —É–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–ª–∞–≤–∏—à–∞, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
     if (!allowedKeys.includes(e.key) && e.key.length === 1) {
         e.preventDefault();
     }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter/Tab –¥–ª—è –ø–æ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É)
async function handleQtyInputKeydownNav(e, tr, qtyInput) {
     if (e.key === 'Enter' || e.key === 'Tab') {
         e.preventDefault();
         const nextRow = tr.nextElementSibling;
         if (!nextRow) {
             // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∏ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º –µ–µ –ø–æ–ª–µ –∏–º–µ–Ω–∏
             const newRow = addRow(true); // addRow(true) —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç nameInput –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
         } else {
             // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º –µ–µ –ø–æ–ª–µ –∏–º–µ–Ω–∏
             const nextNameInput = nextRow.querySelector('.name-input');
             if (nextNameInput) nextNameInput.focus();
         }
     }
}


// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∞–º–∏ –∏ –º–µ–Ω—é ---

function openMenu() {
    sideMenu.classList.add('open');
    document.body.classList.add('menu-open');
}

function closeMenu() {
    sideMenu.classList.remove('open');
    document.body.classList.remove('menu-open');
    closeAllActionDropdowns(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤—ã–ø–∞–¥–∞—é—â–∏–µ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π –≤–∏–¥
function switchView(newViewId) {
    if (newViewId === activeViewId) {
        closeMenu();
        return;
    }

    console.log(`Switching from view ${activeViewId} to ${newViewId}`);

    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ tbody –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã 'value' —É –∏–Ω–ø—É—Ç–æ–≤ –ü–ï–†–ï–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º innerHTML
    tableBody.querySelectorAll('tr').forEach(tr => {
        const nameInput = tr.querySelector('.name-input');
        const qtyInput = tr.querySelector('.qty-input');
        if (nameInput) {
            nameInput.setAttribute('value', nameInput.value);
        }
        if (qtyInput) {
            qtyInput.setAttribute('value', qtyInput.value);
        }
    });
    viewStates[activeViewId] = tableBody.innerHTML;
    console.log(`Saved state for ${activeViewId}:`, viewStates[activeViewId] ? viewStates[activeViewId].substring(0, 100) + '...' : 'EMPTY');

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π ID
    activeViewId = newViewId;

    // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞
    const newHtml = viewStates[activeViewId];
    console.log(`Loading state for ${activeViewId}:`, newHtml ? newHtml.substring(0, 100) + '...' : 'EMPTY');

    tableBody.innerHTML = newHtml || ''; // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π HTML –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É

    // 4. –ï—Å–ª–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ–Ω –Ω–æ–≤—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π)
    if (!newHtml) {
        addRow(true); // –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω—É –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º –µ–µ
    } else {
        // 5. –ü–û–í–¢–û–†–ù–û –ü–†–ò–í–Ø–ó–´–í–ê–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Å—Ç—Ä–æ–∫–∞–º (—Ç–µ–ø–µ—Ä—å –±–µ–∑ paste)
        reAttachEventListenersToRows();
    }

    // 6. –û–±–Ω–æ–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä–æ–∫ –∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞
    renumberRows();
    recalcTotal();

    // 7. –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–µ–Ω—é
    const currentActiveElement = viewList.querySelector('.active-view');
    if (currentActiveElement) {
        currentActiveElement.classList.remove('active-view');
    }
    const newActiveElement = viewList.querySelector(`.view-item[data-view-id="${activeViewId}"]`);
    if (newActiveElement) {
        newActiveElement.classList.add('active-view');
    } else {
        console.warn(`Active view element for ID ${activeViewId} not found in menu.`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π
    updateCurrentViewNameDisplay();

    // 8. –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    closeMenu();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∞
    saveAppStateToLocalStorage();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π
function updateCurrentViewNameDisplay() {
     const viewName = viewMetadata[activeViewId] || '–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫'; // –ë–µ—Ä–µ–º –∏–º—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç
    if (currentViewNameElement) {
        currentViewNameElement.textContent = viewName;
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞ –≤ –º–µ–Ω—é –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function addNewView() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞
    const newViewId = `view-${nextViewIdCounter++}`;
    const newViewName = `–°–ø–∏—Å–æ–∫ ${nextViewIdCounter - 1}`;

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –≤ DOM
    const listItem = document.createElement('li');
    listItem.classList.add('view-item');
    listItem.dataset.viewId = newViewId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–∫ data-–∞—Ç—Ä–∏–±—É—Ç
    listItem.innerHTML = `
        <span>${newViewName}</span>
        <div class="view-actions">
            <button class="ellipsis-btn" aria-label="–î–µ–π—Å—Ç–≤–∏—è"><i class="fas fa-ellipsis-v"></i></button>
            <div class="actions-dropdown">
                <a href="#" class="rename-action">–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å</a>
                <a href="#" class="copy-action">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</a>
                <a href="#" class="delete-action">–£–¥–∞–ª–∏—Ç—å</a>
            </div>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞
    addEventListenersToViewItem(listItem);

    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
    viewList.appendChild(listItem);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞
    viewStates[newViewId] = ''; // –ü—É—Å—Ç–æ–π tbody
    viewMetadata[newViewId] = newViewName;

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π –≤–∏–¥ (–æ–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é addRow –≤–Ω—É—Ç—Ä–∏ switchView)
    switchView(newViewId);
    closeAllActionDropdowns(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª—é–±—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞
    saveAppStateToLocalStorage();
}

// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–∏–¥–∞
function renameView(viewItem) {
    const viewId = viewItem.dataset.viewId;
    const span = viewItem.querySelector('span');
    const currentName = viewMetadata[viewId] || span.textContent; // –ë–µ—Ä–µ–º –∏–º—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–∑ DOM
    const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Å–ø–∏—Å–∫–∞:', currentName); // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if (newName && newName.trim() !== '' && newName !== currentName) {
        const trimmedName = newName.trim();
        span.textContent = trimmedName; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ DOM
        viewMetadata[viewId] = trimmedName; // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        console.log(`View ${viewId} renamed to ${trimmedName}`);
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if (viewId === activeViewId) {
             updateCurrentViewNameDisplay();
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        saveAppStateToLocalStorage();
    }
    closeAllActionDropdowns(viewItem.querySelector('.actions-dropdown')); // –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–∞
function copyView(viewItem) {
    const sourceViewId = viewItem.dataset.viewId;
    const sourceName = viewMetadata[sourceViewId] || viewItem.querySelector('span').textContent; // –ë–µ—Ä–µ–º –∏–º—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö

    // –ü–æ–ª—É—á–∞–µ–º HTML —Ç–µ–∫—É—â–µ–≥–æ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–∞
    // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã 'value' –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ,
    // —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    if (sourceViewId === activeViewId) {
         tableBody.querySelectorAll('tr input').forEach(input => {
             input.setAttribute('value', input.value);
         });
         viewStates[sourceViewId] = tableBody.innerHTML;
    }
    let sourceHtml = viewStates[sourceViewId] || ''; // –ë–µ—Ä–µ–º HTML –∏–∑ viewStates

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ID –∏ –∏–º—è –¥–ª—è –∫–æ–ø–∏–∏
    const newViewId = `view-${nextViewIdCounter++}`;
    const newViewName = `${sourceName} (–ö–æ–ø–∏—è)`;

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –≤ DOM –¥–ª—è –∫–æ–ø–∏–∏
    const listItem = document.createElement('li');
    listItem.classList.add('view-item');
    listItem.dataset.viewId = newViewId;
    listItem.innerHTML = `
        <span>${newViewName}</span>
        <div class="view-actions">
            <button class="ellipsis-btn" aria-label="–î–µ–π—Å—Ç–≤–∏—è"><i class="fas fa-ellipsis-v"></i></button>
            <div class="actions-dropdown">
                <a href="#" class="rename-action">–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å</a>
                <a href="#" class="copy-action">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</a>
                <a href="#" class="delete-action">–£–¥–∞–ª–∏—Ç—å</a>
            </div>
        </div>
    `;
    addEventListenersToViewItem(listItem); // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    viewList.appendChild(listItem); // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM

    // –ö–æ–ø–∏—Ä—É–µ–º HTML —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    viewStates[newViewId] = sourceHtml;
    viewMetadata[newViewId] = newViewName;
    console.log(`View ${sourceViewId} HTML copied to ${newViewId}`);

    switchView(newViewId); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—É—é –∫–æ–ø–∏—é
    closeAllActionDropdowns(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    saveAppStateToLocalStorage();
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–∞
function deleteView(viewItem) {
    const viewIdToDelete = viewItem.dataset.viewId;

    // –ù–µ —É–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
    if (Object.keys(viewStates).length <= 1) {
        alert('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–∏—Å–æ–∫.');
        closeAllActionDropdowns(viewItem.querySelector('.actions-dropdown')); // –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown
        return;
    }

    const viewName = viewMetadata[viewIdToDelete] || viewItem.querySelector('span').textContent; // –ë–µ—Ä–µ–º –∏–º—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ "${viewName}"?`)) {
        // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â
        delete viewStates[viewIdToDelete];
        delete viewMetadata[viewIdToDelete];

        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ DOM
        viewItem.remove();
        console.log(`View ${viewIdToDelete} deleted`);

        // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∏–¥, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—ã–π –æ—Å—Ç–∞–≤—à–∏–π—Å—è –≤ —Å–ø–∏—Å–∫–µ
        if (activeViewId === viewIdToDelete) {
            const firstViewItem = viewList.querySelector('.view-item');
            if (firstViewItem) {
                // switchView —Å–∞–º –æ–±–Ω–æ–≤–∏—Ç activeViewId, –∑–∞–≥—Ä—É–∑–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç
                switchView(firstViewItem.dataset.viewId);
            } else {
                // –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–µ–Ω –∏–∑-–∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Å–∫–æ–≤,
                // –Ω–æ –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ—Å—Ç–∞–ª—Å—è 0 —Å–ø–∏—Å–∫–æ–≤, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                activeViewId = null;
                tableBody.innerHTML = '';
                recalcTotal();
                if (currentViewNameElement) {
                     currentViewNameElement.textContent = '';
                 }
                 saveAppStateToLocalStorage(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            }
        }
        // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –≤–∏–¥, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        else {
            updateCurrentViewNameDisplay();
            saveAppStateToLocalStorage();
        }
    }
     closeAllActionDropdowns(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown
}


// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –∫ —ç–ª–µ–º–µ–Ω—Ç—É –≤–∏–¥–∞ (–≤ –º–µ–Ω—é)
function addEventListenersToViewItem(viewItem) {
    // –ö–ª–∏–∫ –ø–æ —Å–∞–º–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∞)
    viewItem.addEventListener('click', (e) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –Ω–µ –±—ã–ª —Å–¥–µ–ª–∞–Ω –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ .view-actions
        if (!e.target.closest('.view-actions')) {
            switchView(viewItem.dataset.viewId); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥ –ø–æ ID –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞
        }
    });

    // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Ç—Ä–æ–µ—Ç–æ—á–∏—è (–æ—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π)
    const ellipsisBtn = viewItem.querySelector('.ellipsis-btn');
    const dropdown = viewItem.querySelector('.actions-dropdown');
    ellipsisBtn.addEventListener('click', (e) => {
        e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∫–ª–∏–∫ –ø–æ viewItem
        closeAllActionDropdowns(dropdown); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ dropdown'—ã
        dropdown.classList.toggle('show'); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å 'show' –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–≥–æ dropdown
    });

    // –ö–ª–∏–∫–∏ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é
    viewItem.querySelector('.rename-action').addEventListener('click', (e) => {
        e.preventDefault(); e.stopPropagation(); renameView(viewItem); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
    });
    viewItem.querySelector('.copy-action').addEventListener('click', (e) => {
        e.preventDefault(); e.stopPropagation(); copyView(viewItem);
    });
    viewItem.querySelector('.delete-action').addEventListener('click', (e) => {
        e.preventDefault(); e.stopPropagation(); deleteView(viewItem);
    });
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π (–∫—Ä–æ–º–µ –æ–¥–Ω–æ–≥–æ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
function closeAllActionDropdowns(excludeDropdown = null) {
    viewList.querySelectorAll('.actions-dropdown.show').forEach(dropdown => {
        if (dropdown !== excludeDropdown) {
            dropdown.classList.remove('show');
        }
    });
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –∏ dropdown'–æ–≤ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –Ω–∏—Ö
document.addEventListener('click', (e) => {
     // –ï—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –≤–Ω–µ –±–ª–æ–∫–∞ .view-actions, –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ dropdown'—ã –¥–µ–π—Å—Ç–≤–∏–π
     if (!e.target.closest('.view-actions')) {
        closeAllActionDropdowns();
     }
     // –ï—Å–ª–∏ –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ –∏ –∫–ª–∏–∫ –±—ã–ª –≤–Ω–µ –º–µ–Ω—é –∏ –∫–Ω–æ–ø–∫–∏ –µ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
     if (sideMenu.classList.contains('open') && !e.target.closest('.side-menu') && !e.target.closest('.menu-toggle-btn')) {
        closeMenu();
     }
});


// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

async function initializeApp() {
    console.log('Initializing application...');
    // 1. –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é
menuToggleBtn.addEventListener('click', () => {
    sideMenu.classList.add('open'); // Opens the sidebar
    document.body.classList.add('menu-open'); // Add class to body
});
    closeMenuBtn.addEventListener('click', closeMenu);
    addViewBtn.addEventListener('click', addNewView); // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞

    // 2. –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ç–∞–±–ª–∏—Ü—ã (–≠–∫—Å–ø–æ—Ä—Ç, –ü–µ—á–∞—Ç—å, –°–Ω–∏–º–æ–∫)
    const exportButton = document.getElementById('export-csv');
    const printButton = document.getElementById('print-table');
    const snapshotButton = document.getElementById('snapshot-table');
    if (exportButton) exportButton.addEventListener('click', exportTableToCsv);
    if (printButton) printButton.addEventListener('click', printTable);
    if (snapshotButton) snapshotButton.addEventListener('click', captureTableSnapshot);

    // 3. –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ FAB (–∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É")
    fabButton.addEventListener('click', () => {
        addRow(false); // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –±–µ–∑ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –Ω–æ–≤–æ–º –ø–æ–ª–µ
        saveAppStateToLocalStorage(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
    });

    // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã –≤ –ø–æ–¥–≤–∞–ª–µ —Ç–∞–±–ª–∏—Ü—ã
    totalSumCell.dataset.total = 0;
    totalSumCell.textContent = formatNumberDisplay(0);

    // 5. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    await fetchProducts();

    // 6. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏
    updateNetworkStatus();

    // 7. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —à–∞–ø–∫–µ –¥–ª—è –ø–µ—á–∞—Ç–∏ (–µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    const dateElement = document.querySelector('.print-header-text .print-date');
    if (dateElement) {
        const today = new Date();
        const options = { year: 'numeric', month: 'long', day: 'numeric' };
        const formattedDate = today.toLocaleDateString('ru-RU', options);
        dateElement.textContent = formattedDate;
        console.log('–î–∞—Ç–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', formattedDate);
    }

    // --- –ù–û–í–û–ï: –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è PASTE –¥–ª—è –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã ---
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ paste –∫ tableBody
tableBody.addEventListener('paste', async (event) => {
    const targetInput = event.target;

    // Check if the paste target is a 'name-input' or 'qty-input'
    if (targetInput.tagName === 'INPUT' && (targetInput.classList.contains('name-input') || targetInput.classList.contains('qty-input'))) {
        event.preventDefault(); // Prevent default paste behavior

        const pasteData = event.clipboardData.getData('text');

        // For debugging mobile clipboard content (RECOMMENDED during testing)
        console.log("Mobile Paste - Raw Data:", pasteData);
        console.log("Mobile Paste - JSON.stringified Data:", JSON.stringify(pasteData));

        // Use a more robust method to split lines, handling various newline chars
        // and filtering out lines that are empty after trimming.
        const lines = pasteData.split(/[\r\n]+/).filter(line => line.trim() !== '');

        if (lines.length === 0) {
            console.log('No valid lines to paste.');
            return;
        }

        let currentRow = targetInput.closest('tr');
        console.log(`Paste detected on input in row ${currentRow ? currentRow.rowIndex : 'unknown'}. Processing ${lines.length} lines.`);

        const isNameTargetInitial = targetInput.classList.contains('name-input');
        const isQtyTargetInitial = targetInput.classList.contains('qty-input');

        for (let i = 0; i < lines.length; i++) {
            const lineContent = lines[i]; // Use the untrimmed line for quantity, trim for name.
            let currentCellInput;

            if (i === 0) {
                // First line goes into the initially targeted input field
                currentCellInput = targetInput;
            } else {
                // For subsequent lines, add a new row
                addRow(false); // Adds a new row to the table
                currentRow = tableBody.lastElementChild; // Get the newly added row
                if (!currentRow) {
                    console.warn('Failed to add or find new row for pasting.');
                    continue; // Skip if row creation failed
                }

                // Find the corresponding input field in the new row based on the *initial* target type
                if (isNameTargetInitial) {
                    currentCellInput = currentRow.querySelector('.name-input');
                } else if (isQtyTargetInitial) {
                    currentCellInput = currentRow.querySelector('.qty-input');
                }
            }

            if (currentCellInput) {
                if (currentCellInput.classList.contains('name-input')) {
                    currentCellInput.value = lineContent.trim(); // Trim for name input
                    console.log(`Pasted Name "${lineContent.trim()}" into row ${currentRow.rowIndex} name input.`);
                    onNameChange(currentRow, ''); // Force update, assuming value changed
                } else if (currentCellInput.classList.contains('qty-input')) {
                    // For quantity, set the raw value first, then sanitize and format
                    currentCellInput.value = lineContent; // Use untrimmed lineContent
                    const sanitizedValue = sanitizeQtyInput(currentCellInput); // sanitizeQtyInput expects the input element
                    const numericValue = parseFormattedNumber(sanitizedValue);
                    currentCellInput.value = numericValue > 0 ? formatNumberDisplay(numericValue) : (sanitizedValue === '0.' ? '0.' : '');
                    console.log(`Pasted Qty "${currentCellInput.value}" (parsed as ${numericValue}) into row ${currentRow.rowIndex} qty input.`);
                    onQtyChange(currentRow);
                }
                // Dispatch an input event to trigger other potential listeners (e.g., for suggestions)
                currentCellInput.dispatchEvent(new Event('input', { bubbles: true }));
            } else {
                console.warn(`Target input not found for line "${lineContent}" in row ${currentRow ? currentRow.rowIndex : 'N/A'}.`);
            }
        }

        // After processing all lines, recalculate total and save state
        recalcTotal();
        console.log('Recalculated total after paste.');
        saveAppStateToLocalStorage();
        console.log('App state saved after paste.');
    }
});
console.log('Delegated paste listener added to tableBody.');
// --- END OF CORRECTED PASTE EVENT LISTENER ---



    // --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage ---
    const dataLoaded = loadAppStateFromLocalStorage();

    if (dataLoaded) {
       // ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∏–¥–æ–≤ –∏ innerHTML) ...
        console.log('Data loaded from localStorage. Restoring views.');
        viewList.innerHTML = '';
        for (const viewId in viewMetadata) {
            if (viewMetadata.hasOwnProperty(viewId)) {
                 const viewName = viewMetadata[viewId];
                 const listItem = document.createElement('li');
                 listItem.classList.add('view-item');
                 if (viewId === activeViewId) {
                     listItem.classList.add('active-view');
                 }
                 listItem.dataset.viewId = viewId;
                 listItem.innerHTML = `
                    <span>${viewName}</span>
                    <div class="view-actions">
                        <button class="ellipsis-btn" aria-label="–î–µ–π—Å—Ç–≤–∏—è"><i class="fas fa-ellipsis-v"></i></button>
                        <div class="actions-dropdown">
                            <a href="#" class="rename-action">–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å</a>
                            <a href="#" class="copy-action">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</a>
                            <a href="#" class="delete-action">–£–¥–∞–ª–∏—Ç—å</a>
                        </div>
                    </div>
                 `;
                 addEventListenersToViewItem(listItem);
                 viewList.appendChild(listItem);
            }
        }

         // –ó–∞–≥—Ä—É–∂–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–∞
         tableBody.innerHTML = viewStates[activeViewId] || '';

         // –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ù–ï-PASTE –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
         reAttachEventListenersToRows();

         // –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
         renumberRows();
         recalcTotal();

         // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π nextViewIdCounter
         let maxViewNumber = 0;
         for (const viewId in viewStates) {
             const match = viewId.match(/^view-(\d+)$/);
             if (match && match[1]) {
                 const viewNumber = parseInt(match[1], 10);
                 if (!isNaN(viewNumber) && viewNumber > maxViewNumber) {
                     maxViewNumber = viewNumber;
                 }
             }
         }
         nextViewIdCounter = maxViewNumber + 1;


    } else {
        // ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, addRow, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è) ...
        console.log('No saved data found. Starting with default state.');
        viewStates['view-1'] = '';
        viewMetadata['view-1'] = '–°–ø–∏—Å–æ–∫ 1';
        activeViewId = 'view-1';
        nextViewIdCounter = 2;

        addRow(); // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è view-1 –ø–æ—Å–ª–µ addRow()
        tableBody.querySelectorAll('tr input').forEach(input => {
            input.setAttribute('value', input.value);
        });
        viewStates['view-1'] = tableBody.innerHTML;

        console.log('Initial state for view-1 saved:', viewStates['view-1'] ? viewStates['view-1'].substring(0, 100) + '...' : 'EMPTY');

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É —Å–ø–∏—Å–∫–∞ (view-1)
        const initialViewItem = viewList.querySelector('.view-item');
        if (initialViewItem) {
            initialViewItem.classList.add('active-view');
            addEventListenersToViewItem(initialViewItem);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage
        saveAppStateToLocalStorage();
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏–º—è —Å–ø–∏—Å–∫–∞ –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π
    updateCurrentViewNameDisplay();

    console.log('Application initialized.');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', initializeApp);

// --- –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
window.addEventListener('beforeunload', () => {
    console.log('Saving app state before unload...');
    tableBody.querySelectorAll('tr input').forEach(input => {
        input.setAttribute('value', input.value);
    });
    viewStates[activeViewId] = tableBody.innerHTML;
    saveAppStateToLocalStorage();
});
// --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ---
